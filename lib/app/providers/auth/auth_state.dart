import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:aina_flutter/app/providers/requests/auth/login.dart';
import 'package:aina_flutter/shared/services/storage_service.dart';
import 'package:aina_flutter/shared/api/api_client.dart';
import 'package:aina_flutter/shared/utils/notification_utils.dart';
import 'package:dio/dio.dart';
import 'dart:async';

class AuthState {
  final bool isAuthenticated;
  final bool hasCompletedProfile;
  final String? token;
  final String? refreshToken;
  final String? phoneNumber;
  final Map<String, dynamic>? userData;

  AuthState({
    this.isAuthenticated = false,
    this.hasCompletedProfile = false,
    this.token,
    this.refreshToken,
    this.phoneNumber,
    this.userData,
  });

  AuthState copyWith({
    bool? isAuthenticated,
    bool? hasCompletedProfile,
    String? token,
    String? refreshToken,
    String? phoneNumber,
    Map<String, dynamic>? userData,
  }) {
    return AuthState(
      isAuthenticated: isAuthenticated ?? this.isAuthenticated,
      hasCompletedProfile: hasCompletedProfile ?? this.hasCompletedProfile,
      token: token ?? this.token,
      refreshToken: refreshToken ?? this.refreshToken,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      userData: userData ?? this.userData,
    );
  }
}

class AuthNotifier extends StateNotifier<AuthState> {
  final Ref ref;

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
  DateTime? _lastTokenValidation;
  bool? _lastValidationResult;
  static const Duration _validationCacheDuration = Duration(seconds: 30);

  AuthNotifier(this.ref) : super(AuthState(isAuthenticated: false)) {
    _initializeAuth();
  }

  @override
  void dispose() {
    // Clean up any resources here
    debugPrint('üßπ AuthNotifier disposed');
    super.dispose();
  }

  Future<void> _initializeAuth() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ StorageService
      final isAuthenticated = await StorageService.isAuthenticated();
      if (!isAuthenticated) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      final token = await StorageService.getToken();
      if (token == null) {
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = token;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final userData = await StorageService.getUserData();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ç–∏—Ñ–∞–µ—Ä –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      try {
        state = state.copyWith(
          isAuthenticated: true,
          token: token,
          userData: userData,
        );
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è AuthNotifier: $e');
        return;
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (userData == null) {
        try {
          final requestService = ref.read(requestCodeProvider);
          final response = await requestService.userProfile();

          // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ç–∏—Ñ–∞–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
          try {
            if (response?.statusCode == 200 && response?.data != null) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              await StorageService.saveUserData(response?.data);
              state = state.copyWith(userData: response?.data);
            } else {
              // If profile fetch fails, log out
              await logout();
            }
          } catch (e) {
            debugPrint(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ _initializeAuth: $e');
    }
  }

  bool get canAccessProfile {
    return state.isAuthenticated && state.userData != null;
  }

  Future<void> setToken(String token) async {
    try {
      // Clear cache before setting new token
      ApiClient().clearCache();

      // –û—á–∏—â–∞–µ–º –∫–µ—à –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ
      _lastTokenValidation = null;
      _lastValidationResult = null;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await StorageService.saveToken(token);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = token;

      try {
        state = state.copyWith(
          isAuthenticated: true,
          token: token,
        );
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ setToken: $e');
        return;
      }

      // Fetch user profile after setting token
      try {
        final requestService = ref.read(requestCodeProvider);
        final response = await requestService.userProfile();

        try {
          if (response?.statusCode == 200 && response?.data != null) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await StorageService.saveUserData(response?.data);
            state = state.copyWith(userData: response?.data);
          } else {
            // If profile fetch fails, log out
            await logout();
          }
        } catch (e) {
          debugPrint(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ setToken: $e');
        }
      } catch (e) {
        debugPrint(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ setToken: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ setToken: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, false –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω
  Future<bool> validateToken() async {
    try {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
      if (!state.isAuthenticated || state.token == null) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      final now = DateTime.now();
      if (_lastTokenValidation != null &&
          _lastValidationResult != null &&
          now.difference(_lastTokenValidation!).inSeconds <
              _validationCacheDuration.inSeconds) {
        debugPrint(
            'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: $_lastValidationResult');
        return _lastValidationResult!;
      }

      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

      // –î–µ–ª–∞–µ–º –ª–µ–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
      final requestService = ref.read(requestCodeProvider);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
      final response = await requestService.userProfile().timeout(
        const Duration(seconds: 5),
        onTimeout: () {
          debugPrint('‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞');
          throw TimeoutException(
              'Token validation timeout', const Duration(seconds: 5));
        },
      );

      bool isValid = false;

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 200 –æ—Ç–≤–µ—Ç, —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
      if (response?.statusCode == 200) {
        isValid = true;
        debugPrint('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      }
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
      else if (response?.statusCode == 401) {
        debugPrint('üîí –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
        await logout();
        isValid = false;
      }
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
      else {
        debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: ${response?.statusCode}');
        isValid = false;
      }

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _lastTokenValidation = now;
      _lastValidationResult = isValid;

      return isValid;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞: $e');

      // –ï—Å–ª–∏ —ç—Ç–æ DioException —Å 401, —Ç–æ —Ç–æ–∫–µ–Ω —Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
      if (e is DioException && e.response?.statusCode == 401) {
        debugPrint('üîí –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω (DioException), –≤—ã–ø–æ–ª–Ω—è–µ–º logout');
        await logout();

        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        _lastTokenValidation = DateTime.now();
        _lastValidationResult = false;
        return false;
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ª—É—á—à–µ —Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      // –ù–æ –Ω–µ –∫–µ—à–∏—Ä—É–µ–º —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
      return false;
    }
  }

  Future<void> logout() async {
    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
      _lastTokenValidation = null;
      _lastValidationResult = null;

      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ StorageService
      await StorageService.clearAuthData();

      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = null;

      // Clear API client's cache
      ApiClient().clearCache();

      // Clear FCM registration status to allow re-registration
      try {
        await clearFCMRegistrationStatus();
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ FCM —Å—Ç–∞—Ç—É—Å–∞: $e');
      }

      try {
        state = AuthState(isAuthenticated: false);
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ logout: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ logout: $e');
    }
  }

  void updateUserData(Map<String, dynamic> userData) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      StorageService.saveUserData(userData);
      state = state.copyWith(userData: userData);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }
}

final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  debugPrint('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AuthNotifier');
  final notifier = AuthNotifier(ref);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  ref.onDispose(() {
    debugPrint('üßπ –ü—Ä–æ–≤–∞–π–¥–µ—Ä authProvider —É–¥–∞–ª–µ–Ω');
  });

  return notifier;
});
