import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:aina_flutter/app/providers/requests/auth/login.dart';
import 'package:aina_flutter/shared/services/storage_service.dart';
import 'package:aina_flutter/shared/api/api_client.dart';

class AuthState {
  final bool isAuthenticated;
  final bool hasCompletedProfile;
  final String? token;
  final String? refreshToken;
  final String? phoneNumber;
  final Map<String, dynamic>? userData;

  AuthState({
    this.isAuthenticated = false,
    this.hasCompletedProfile = false,
    this.token,
    this.refreshToken,
    this.phoneNumber,
    this.userData,
  });

  AuthState copyWith({
    bool? isAuthenticated,
    bool? hasCompletedProfile,
    String? token,
    String? refreshToken,
    String? phoneNumber,
    Map<String, dynamic>? userData,
  }) {
    return AuthState(
      isAuthenticated: isAuthenticated ?? this.isAuthenticated,
      hasCompletedProfile: hasCompletedProfile ?? this.hasCompletedProfile,
      token: token ?? this.token,
      refreshToken: refreshToken ?? this.refreshToken,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      userData: userData ?? this.userData,
    );
  }
}

class AuthNotifier extends StateNotifier<AuthState> {
  final Ref ref;

  AuthNotifier(this.ref) : super(AuthState(isAuthenticated: false)) {
    _initializeAuth();
  }

  @override
  void dispose() {
    // Clean up any resources here
    debugPrint('üßπ AuthNotifier disposed');
    super.dispose();
  }

  Future<void> _initializeAuth() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ StorageService
      final isAuthenticated = await StorageService.isAuthenticated();
      if (!isAuthenticated) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      final token = await StorageService.getToken();
      if (token == null) {
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = token;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final userData = await StorageService.getUserData();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ç–∏—Ñ–∞–µ—Ä –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      try {
        state = state.copyWith(
          isAuthenticated: true,
          token: token,
          userData: userData,
        );
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è AuthNotifier: $e');
        return;
      }

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (userData == null) {
        try {
          final requestService = ref.read(requestCodeProvider);
          final response = await requestService.userProfile();

          // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ—Ç–∏—Ñ–∞–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
          try {
            if (response?.statusCode == 200 && response?.data != null) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
              await StorageService.saveUserData(response?.data);
              state = state.copyWith(userData: response?.data);
            } else {
              // If profile fetch fails, log out
              await logout();
            }
          } catch (e) {
            debugPrint(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ _initializeAuth: $e');
    }
  }

  bool get canAccessProfile {
    return state.isAuthenticated && state.userData != null;
  }

  Future<void> setToken(String token) async {
    try {
      // Clear cache before setting new token
      ApiClient().clearCache();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await StorageService.saveToken(token);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = token;

      try {
        state = state.copyWith(
          isAuthenticated: true,
          token: token,
        );
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ setToken: $e');
        return;
      }

      // Fetch user profile after setting token
      try {
        final requestService = ref.read(requestCodeProvider);
        final response = await requestService.userProfile();

        try {
          if (response?.statusCode == 200 && response?.data != null) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await StorageService.saveUserData(response?.data);
            state = state.copyWith(userData: response?.data);
          } else {
            // If profile fetch fails, log out
            await logout();
          }
        } catch (e) {
          debugPrint(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ setToken: $e');
        }
      } catch (e) {
        debugPrint(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ setToken: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ setToken: $e');
    }
  }

  Future<void> logout() async {
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ StorageService
      await StorageService.clearAuthData();

      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiClient
      ApiClient().token = null;

      // Clear API client's cache
      ApiClient().clearCache();

      try {
        state = AuthState(isAuthenticated: false);
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ logout: $e');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ logout: $e');
    }
  }

  void updateUserData(Map<String, dynamic> userData) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      StorageService.saveUserData(userData);
      state = state.copyWith(userData: userData);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }
}

final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  debugPrint('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AuthNotifier');
  final notifier = AuthNotifier(ref);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  ref.onDispose(() {
    debugPrint('üßπ –ü—Ä–æ–≤–∞–π–¥–µ—Ä authProvider —É–¥–∞–ª–µ–Ω');
  });

  return notifier;
});
