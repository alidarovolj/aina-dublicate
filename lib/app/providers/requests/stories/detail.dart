import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:aina_flutter/shared/api/api_client.dart';
import 'package:aina_flutter/shared/types/stories_type.dart';
import 'package:aina_flutter/shared/services/storage_service.dart';
import 'package:dio/dio.dart';

final apiClientProvider = Provider<ApiClient>((ref) => ApiClient());

class StoryDetailService {
  final ApiClient _apiClient;

  StoryDetailService(this._apiClient);

  Future<String?> _getAuthHeader() async {
    final token = await StorageService.getToken();
    return token != null ? 'Bearer $token' : null;
  }

  Future<Story?> getStoryDetail(int storyId) async {
    try {
      final response = await _apiClient.dio.get('/api/aina/stories/$storyId');
      if (response.data != null) {
        return Story.fromJson(response.data['data']);
      }
      return null;
    } catch (e) {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º 404 –æ—à–∏–±–∫–∏ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π
      if (e.toString().contains('404')) {
        print(
            '‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è $storyId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è)');
        return null;
      }
      rethrow;
    }
  }

  Future<bool> markStoryAsViewed(int storyId) async {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await StorageService.setStoryViewed(storyId);

      print('üìñ –õ–æ–∫–∞–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è $storyId –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è');
      return true;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π: $e');
      return false;
    }
  }
}

final storyDetailServiceProvider = Provider<StoryDetailService>((ref) {
  return StoryDetailService(ref.watch(apiClientProvider));
});

final storyDetailProvider =
    FutureProvider.family<Story?, int>((ref, storyId) async {
  final service = ref.watch(storyDetailServiceProvider);
  return service.getStoryDetail(storyId);
});

final markStoryViewedProvider =
    FutureProvider.family<bool, int>((ref, storyId) async {
  final service = ref.watch(storyDetailServiceProvider);
  return service.markStoryAsViewed(storyId);
});
