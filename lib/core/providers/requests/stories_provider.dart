import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:aina_flutter/core/types/stories_type.dart';
import 'package:aina_flutter/core/providers/requests/stories/list.dart';

class StoriesProvider extends StateNotifier<AsyncValue<List<Story>>> {
  StoriesProvider(this._listService) : super(const AsyncValue.loading()) {
    fetchStories();
  }

  final RequestCodeService _listService;
  bool _mounted = true;

  @override
  void dispose() {
    _mounted = false;
    super.dispose();
  }

  Future<void> fetchStories() async {
    if (!_mounted) return;

    state = const AsyncValue.loading();

    try {
      print('üì± –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–π...');
      final response = await _listService.stories();

      if (!_mounted) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ null
      if (response == null) {
        print('‚ùå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—É—Å—Ç–æ–π');
        throw Exception('500 Internal Server Error');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
      if (response.statusCode != 200) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
        throw Exception('${response.statusCode} Server Error');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (response.data['data'] == null) {
        print('‚ùå –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
        throw Exception('No data in response');
      }

      print(
          '‚úÖ –ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${(response.data['data'] as List).length} —à—Ç.');
      final List<Story> stories = (response.data['data'] as List)
          .map((json) => Story.fromJson(json as Map<String, dynamic>))
          .toList();

      if (!_mounted) return;
      state = AsyncValue.data(stories);
    } catch (error, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–π: $error');

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      final String errorMessage = _formatErrorMessage(error);
      if (!_mounted) return;
      state = AsyncValue.error(errorMessage, stackTrace);
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  String _formatErrorMessage(Object error) {
    final errorString = error.toString();

    if (errorString.contains('500')) {
      return '500 Internal Server Error';
    } else if (errorString.contains('404')) {
      return '404 Not Found';
    } else if (errorString.contains('401') || errorString.contains('403')) {
      return 'Authentication Error';
    } else if (errorString.contains('timeout') ||
        errorString.contains('SocketException') ||
        errorString.contains('Network')) {
      return 'Network Error';
    }

    return errorString;
  }
}

final storiesProvider =
    StateNotifierProvider<StoriesProvider, AsyncValue<List<Story>>>(
  (ref) => StoriesProvider(ref.read(requestCodeProvider)),
);
