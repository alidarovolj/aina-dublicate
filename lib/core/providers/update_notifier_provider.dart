import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:aina_flutter/core/api/api_client.dart';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:in_app_update/in_app_update.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';

enum UpdateType {
  none,
  minor,
  hard,
}

class UpdateNotifierState {
  final UpdateType type;
  final String currentVersion;
  final String newVersion;

  UpdateNotifierState({
    required this.type,
    required this.currentVersion,
    required this.newVersion,
  });

  UpdateNotifierState copyWith({
    UpdateType? type,
    String? currentVersion,
    String? newVersion,
  }) {
    return UpdateNotifierState(
      type: type ?? this.type,
      currentVersion: currentVersion ?? this.currentVersion,
      newVersion: newVersion ?? this.newVersion,
    );
  }
}

class UpdateNotifier extends StateNotifier<UpdateNotifierState> {
  UpdateNotifier()
      : super(UpdateNotifierState(
          type: UpdateType.none,
          currentVersion: '',
          newVersion: '',
        ));

  @override
  void dispose() {
    // Clean up any resources here
    print('üßπ UpdateNotifier disposed');
    super.dispose();
  }

  Future<String?> _getIosStoreVersion() async {
    try {
      print('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ App Store...');
      final response = await Dio().get(
        'https://itunes.apple.com/lookup?bundleId=kz.aina.ios&country=KZ',
      );

      // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      print('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç App Store:');
      if (response.data is Map) {
        print('   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Map');
        if (response.data.containsKey('resultCount')) {
          print('   resultCount: ${response.data['resultCount']}');
        } else {
          print('   –ö–ª—é—á resultCount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        if (response.data.containsKey('results')) {
          print(
              '   results –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–∏–ø: ${response.data['results'].runtimeType}');
          if (response.data['results'] is List &&
              response.data['results'].isNotEmpty) {
            print(
                '   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${response.data['results'].length}');
            print(
                '   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∏–ø: ${response.data['results'][0].runtimeType}');
            if (response.data['results'][0] is Map) {
              if (response.data['results'][0].containsKey('version')) {
                print('   –í–µ—Ä—Å–∏—è: ${response.data['results'][0]['version']}');
              } else {
                print('   –ö–ª—é—á version –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
                // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(
                    '   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: ${response.data['results'][0].keys.toList()}');
              }
            }
          } else {
            print('   results –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º');
          }
        } else {
          print('   –ö–ª—é—á results –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
      } else {
        print('   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ Map: ${response.data.runtimeType}');
      }

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (response.data is Map) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ resultCount –∏ results
        if (response.data.containsKey('resultCount') &&
            response.data['resultCount'] is int &&
            response.data['resultCount'] > 0 &&
            response.data.containsKey('results') &&
            response.data['results'] is List &&
            response.data['results'].isNotEmpty) {
          final firstResult = response.data['results'][0];

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
          if (firstResult is Map) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ version
            if (firstResult.containsKey('version')) {
              final storeVersion = firstResult['version'].toString();
              print('üì¶ –í–µ—Ä—Å–∏—è –≤ App Store: $storeVersion');
              return storeVersion;
            }
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Ä—Å–∏—é
            else if (firstResult.containsKey('currentVersion')) {
              final storeVersion = firstResult['currentVersion'].toString();
              print('üì¶ –í–µ—Ä—Å–∏—è –≤ App Store (currentVersion): $storeVersion');
              return storeVersion;
            } else if (firstResult.containsKey('latestVersion')) {
              final storeVersion = firstResult['latestVersion'].toString();
              print('üì¶ –í–µ—Ä—Å–∏—è –≤ App Store (latestVersion): $storeVersion');
              return storeVersion;
            } else {
              print(
                  '‚ö†Ô∏è –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—Ç –∫–ª—é—á–∞ version –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π');
            }
          } else {
            print(
                '‚ö†Ô∏è –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Map: ${firstResult.runtimeType}');
          }
        } else {
          print('‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç resultCount > 0 –∏–ª–∏ results');
        }
      } else {
        print('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Map: ${response.data.runtimeType}');
      }

      print('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç App Store: ${response.data}');
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –∏–∑ App Store: $e');
      return null;
    }
  }

  Future<bool> _checkAndroidUpdate() async {
    try {
      print('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store...');

      if (defaultTargetPlatform != TargetPlatform.android) {
        print('‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ Android');
        return false;
      }

      try {
        final updateInfo = await InAppUpdate.checkForUpdate();

        if (updateInfo.updateAvailability ==
            UpdateAvailability.updateAvailable) {
          print('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Play Store');
          return true;
        } else {
          print('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store –Ω–µ—Ç');
          return false;
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ in_app_update: $e');
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ API
        try {
          final response = await ApiClient().dio.get(
                '/api/aina/version',
                options: Options(
                  headers: {'platform': 'android'},
                ),
              );

          if (response.data['success'] == true &&
              response.data['data'] != null) {
            final serverVersion = response.data['data']['version'] as String;
            final packageInfo = await PackageInfo.fromPlatform();
            final currentVersion = packageInfo.version;

            print(
                'üì± –í–µ—Ä—Å–∏—è –∏–∑ API - —Ç–µ–∫—É—â–∞—è: $currentVersion, —Å–µ—Ä–≤–µ—Ä–Ω–∞—è: $serverVersion');

            if (serverVersion != currentVersion) {
              print('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API');
              return true;
            }
          }
          print('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API –Ω–µ—Ç');
          return false;
        } catch (apiError) {
          // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,
          // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ API: $apiError');
          return false;
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store: $e');
      return false;
    }
  }

  Future<void> checkForUpdates() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      print('üîÑ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $currentVersion');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase Remote Config
      final remoteConfig = FirebaseRemoteConfig.instance;
      await remoteConfig.fetchAndActivate();

      String latestVersionKey, minVersionKey;
      if (defaultTargetPlatform == TargetPlatform.iOS) {
        latestVersionKey = 'current_ios_version';
        minVersionKey = 'min_ios_version';
      } else {
        latestVersionKey = 'current_android_version';
        minVersionKey = 'min_android_version';
      }

      final latestVersion = remoteConfig.getString(latestVersionKey);
      final minVersion = remoteConfig.getString(minVersionKey);

      print('üì¶ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –∏–∑ Remote Config: $latestVersion');
      print('üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ Remote Config: $minVersion');

      if (latestVersion.isEmpty || minVersion.isEmpty) {
        print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏—è—Ö –∏–∑ Remote Config');
        try {
          state = state.copyWith(type: UpdateType.none);
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $e');
        }
        return;
      }

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
      final needsHardUpdate = _isVersionLower(currentVersion, minVersion);
      final needsMinorUpdate = _isVersionLower(currentVersion, latestVersion) &&
          !_isVersionLower(currentVersion, minVersion);

      print('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
      print('   –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $needsHardUpdate');
      print('   –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $needsMinorUpdate');

      if (!needsHardUpdate && !needsMinorUpdate) {
        print('üí§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        try {
          state = state.copyWith(type: UpdateType.none);
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $e');
        }
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      final updateType = needsHardUpdate ? UpdateType.hard : UpdateType.minor;

      print('üîî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      print(
          '   –¢–∏–ø: ${updateType == UpdateType.hard ? "hard (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)" : "minor (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ)"}');
      print('   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $currentVersion');
      print('   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $latestVersion');
      print('   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $minVersion');

      try {
        state = state.copyWith(
          type: updateType,
          currentVersion: currentVersion,
          newVersion: latestVersion,
        );
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $e');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $e');
      try {
        state = state.copyWith(type: UpdateType.none);
      } catch (stateError) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $stateError');
      }
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
  bool _isVersionLower(String currentVersion, String targetVersion) {
    print(
        'üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏: —Ç–µ–∫—É—â–∞—è $currentVersion, —Ü–µ–ª–µ–≤–∞—è $targetVersion');

    try {
      final currentParts = currentVersion.split('.').map(int.parse).toList();
      final targetParts = targetVersion.split('.').map(int.parse).toList();

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏, –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –≤–µ—Ä—Å–∏–∏ –º–µ–Ω—å—à–µ —á–∞—Å—Ç–µ–π
      while (currentParts.length < 3) currentParts.add(0);
      while (targetParts.length < 3) targetParts.add(0);

      print('üî¢ –†–∞–∑–±–æ—Ä –≤–µ—Ä—Å–∏–π: —Ç–µ–∫—É—â–∞—è $currentParts, —Ü–µ–ª–µ–≤–∞—è $targetParts');

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤–µ—Ä—Å–∏–∏
      for (int i = 0; i < 3; i++) {
        if (currentParts[i] < targetParts[i]) {
          print(
              'üìâ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ù–ò–ñ–ï —Ü–µ–ª–µ–≤–æ–π –≤ –ø–æ–∑–∏—Ü–∏–∏ $i: ${currentParts[i]} < ${targetParts[i]}');
          return true;
        }
        if (currentParts[i] > targetParts[i]) {
          print(
              'üìà –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –í–´–®–ï —Ü–µ–ª–µ–≤–æ–π –≤ –ø–æ–∑–∏—Ü–∏–∏ $i: ${currentParts[i]} > ${targetParts[i]}');
          return false;
        }
      }

      print('üìä –í–µ—Ä—Å–∏–∏ –†–ê–í–ù–´');
      return false; // –í–µ—Ä—Å–∏–∏ —Ä–∞–≤–Ω—ã
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–π: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      return false;
    }
  }

  void resetUpdateState() {
    try {
      state = state.copyWith(type: UpdateType.none);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: $e');
    }
  }
}

final updateNotifierProvider =
    StateNotifierProvider<UpdateNotifier, UpdateNotifierState>((ref) {
  print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ UpdateNotifier');
  final notifier = UpdateNotifier();

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  ref.onDispose(() {
    print('üßπ –ü—Ä–æ–≤–∞–π–¥–µ—Ä updateNotifierProvider —É–¥–∞–ª–µ–Ω');
  });

  return notifier;
});
