import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:aina_flutter/core/api/api_client.dart';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:in_app_update/in_app_update.dart';

enum UpdateType {
  none,
  minor,
  hard,
}

class UpdateNotifierState {
  final UpdateType type;
  final String currentVersion;
  final String newVersion;

  UpdateNotifierState({
    required this.type,
    required this.currentVersion,
    required this.newVersion,
  });

  UpdateNotifierState copyWith({
    UpdateType? type,
    String? currentVersion,
    String? newVersion,
  }) {
    return UpdateNotifierState(
      type: type ?? this.type,
      currentVersion: currentVersion ?? this.currentVersion,
      newVersion: newVersion ?? this.newVersion,
    );
  }
}

class UpdateNotifier extends StateNotifier<UpdateNotifierState> {
  UpdateNotifier()
      : super(UpdateNotifierState(
          type: UpdateType.none,
          currentVersion: '',
          newVersion: '',
        ));

  Future<String?> _getIosStoreVersion() async {
    try {
      print('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ App Store...');
      final response = await Dio().get(
        'https://itunes.apple.com/lookup?bundleId=kz.aina.ios&country=KZ',
      );

      if (response.data['resultCount'] > 0) {
        final storeVersion = response.data['results'][0]['version'] as String;
        print('üì¶ –í–µ—Ä—Å–∏—è –≤ App Store: $storeVersion');
        return storeVersion;
      }
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –∏–∑ App Store: $e');
      return null;
    }
  }

  Future<bool> _checkAndroidUpdate() async {
    try {
      print('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store...');

      if (defaultTargetPlatform != TargetPlatform.android) {
        print('‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ Android');
        return false;
      }

      try {
        final updateInfo = await InAppUpdate.checkForUpdate();

        if (updateInfo.updateAvailability ==
            UpdateAvailability.updateAvailable) {
          print('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Play Store');
          return true;
        } else {
          print('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store –Ω–µ—Ç');
          return false;
        }
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ in_app_update: $e');
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ API
        try {
          final response = await ApiClient().dio.get(
                '/api/aina/version',
                options: Options(
                  headers: {'platform': 'android'},
                ),
              );

          if (response.data['success'] == true &&
              response.data['data'] != null) {
            final serverVersion = response.data['data']['version'] as String;
            final packageInfo = await PackageInfo.fromPlatform();
            final currentVersion = packageInfo.version;

            print(
                'üì± –í–µ—Ä—Å–∏—è –∏–∑ API - —Ç–µ–∫—É—â–∞—è: $currentVersion, —Å–µ—Ä–≤–µ—Ä–Ω–∞—è: $serverVersion');

            if (serverVersion != currentVersion) {
              print('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API');
              return true;
            }
          }
          print('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API –Ω–µ—Ç');
          return false;
        } catch (apiError) {
          // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,
          // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ API: $apiError');
          return false;
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Play Store: $e');
      return false;
    }
  }

  Future<void> checkForUpdates() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      print('üîÑ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $currentVersion');

      String? storeVersion;
      bool needsUpdate = false;

      if (defaultTargetPlatform == TargetPlatform.iOS) {
        storeVersion = await _getIosStoreVersion();
        if (storeVersion != null) {
          needsUpdate = storeVersion != currentVersion;
        }
      } else if (defaultTargetPlatform == TargetPlatform.android) {
        needsUpdate = await _checkAndroidUpdate();
        if (needsUpdate) {
          // –î–ª—è Android –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é,
          // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
          final parts = currentVersion.split('.');
          if (parts.isNotEmpty) {
            final major = int.parse(parts[0]);
            storeVersion = '${major + 1}.0.0';
          }
        }
      }

      if (storeVersion == null || !needsUpdate) {
        print('üí§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        state = state.copyWith(type: UpdateType.none);
        return;
      }

      print('üì¶ –í–µ—Ä—Å–∏—è –≤ —Å—Ç–æ—Ä–µ: $storeVersion');

      // –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏
      final currentParts = currentVersion.split('.').map(int.parse).toList();
      final serverParts = storeVersion.split('.').map(int.parse).toList();
      print('üîç –†–∞–∑–±–æ—Ä –≤–µ—Ä—Å–∏–π:');
      print('   –¢–µ–∫—É—â–∞—è: $currentParts');
      print('   –°–µ—Ä–≤–µ—Ä–Ω–∞—è: $serverParts');

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏, –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –≤–µ—Ä—Å–∏–∏ –º–µ–Ω—å—à–µ —á–∞—Å—Ç–µ–π
      while (currentParts.length < 3) {
        currentParts.add(0);
      }
      while (serverParts.length < 3) {
        serverParts.add(0);
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      bool isHardUpdate = serverParts[0] > currentParts[0];

      print('üîî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      print('   –¢–∏–ø: ${isHardUpdate ? "hard" : "minor"}');
      print('   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $currentVersion');
      print('   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $storeVersion');

      state = state.copyWith(
        type: isHardUpdate ? UpdateType.hard : UpdateType.minor,
        currentVersion: currentVersion,
        newVersion: storeVersion,
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $e');
      state = state.copyWith(type: UpdateType.none);
    }
  }

  void resetUpdateState() {
    state = state.copyWith(type: UpdateType.none);
  }
}

final updateNotifierProvider =
    StateNotifierProvider<UpdateNotifier, UpdateNotifierState>((ref) {
  return UpdateNotifier();
});
