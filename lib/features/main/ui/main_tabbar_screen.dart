import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:aina_flutter/shared/ui/blocks/custom_tabbar.dart';
import 'package:aina_flutter/app/providers/auth/auth_state.dart';
import 'package:aina_flutter/shared/navigation/index.dart';

class MainTabBarScreen extends ConsumerStatefulWidget {
  final Widget child;
  final String currentRoute;

  const MainTabBarScreen({
    super.key,
    required this.child,
    required this.currentRoute,
  });

  @override
  ConsumerState<MainTabBarScreen> createState() => _MainTabBarScreenState();
}

class _MainTabBarScreenState extends ConsumerState<MainTabBarScreen>
    with SingleTickerProviderStateMixin, RouteAware {
  late TabController _tabController;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–∞–±–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  int _lastTabIndexBeforeAuth = 0;
  int _previousTabIndex = 0;

  final Map<String, int> _routesToTabIndex = {
    '/malls': 0,
    '/malls/*/promotions': 1,
    '/stores': 2,
    '/malls/*/stores': 2,
    '/malls/*/profile': 3,
  };

  final Map<int, String> _tabIndexToRoutes = {
    0: '/malls',
    1: '/malls/*/promotions', // When clicking promotions tab, stay on current mall's promotions
    2: '/stores',
    3: '/malls/*/profile',
  };

  String _normalizeRoute(String route) {
    // Convert routes like /malls/123/promotions to /malls/*/promotions
    final parts = route.split('/');
    if (parts.length >= 3 && parts[1] == 'malls' && parts.length > 3) {
      if (parts[3] == 'promotions') {
        return '/malls/*/promotions';
      }
      if (parts[3] == 'stores') {
        return '/malls/*/stores';
      }
      if (parts[3] == 'profile') {
        return '/malls/*/profile';
      }
    }
    return route;
  }

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _updateTabFromRoute();

    _tabController.addListener(() {
      if (_tabController.indexIsChanging) {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–±–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        debugPrint('üéµ MAIN TAB CONTROLLER LISTENER:');
        debugPrint(
            '   Index changing from ${_tabController.previousIndex} to ${_tabController.index}');
        debugPrint('   Animation: ${_tabController.animation?.value}');
        _navigateToTab(_tabController.index);
      }
    });

    debugPrint('üöÄ MAIN TAB BAR SCREEN INITIALIZED');
    debugPrint('   Initial route: ${widget.currentRoute}');
    debugPrint('   Initial tab index: ${_tabController.index}');
  }

  @override
  void didUpdateWidget(MainTabBarScreen oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.currentRoute != widget.currentRoute) {
      debugPrint('üîÑ MAIN TAB BAR SCREEN UPDATED:');
      debugPrint('   Old route: ${oldWidget.currentRoute}');
      debugPrint('   New route: ${widget.currentRoute}');

      // Clean query parameters from route before normalization
      final routeWithoutQuery = widget.currentRoute.split('?')[0];
      final normalizedRoute = _normalizeRoute(routeWithoutQuery);
      final index = _routesToTabIndex[normalizedRoute] ?? 0;

      debugPrint(
          '‚ö†Ô∏è didUpdateWidget: oldRoute: ${oldWidget.currentRoute}, newRoute: ${widget.currentRoute}, index: $index, current tab: ${_tabController.index}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ª–∏ –º—ã —Å —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      final isComingFromLogin = oldWidget.currentRoute.startsWith('/login') &&
          !widget.currentRoute.startsWith('/login');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      final isGoingToLogin = !oldWidget.currentRoute.startsWith('/login') &&
          widget.currentRoute.startsWith('/login');

      if (isGoingToLogin) {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        debugPrint(
            '‚ö†Ô∏è Going to login screen from route: ${oldWidget.currentRoute}');
      } else if (isComingFromLogin) {
        debugPrint(
            '‚ö†Ô∏è Coming back from login screen, actual route: ${widget.currentRoute}, needs tab index: $index');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–∞–±–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Future.delayed –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
        Future.delayed(const Duration(milliseconds: 100), () {
          if (mounted) {
            setState(() {
              _tabController.index = index;
            });
            debugPrint(
                '‚ö†Ô∏è Delayed force tab index update to $index after login return');
          }
        });
      } else {
        // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–∞–±–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        if (_tabController.index != index) {
          setState(() {
            _tabController.index = index;
          });
        } else {
          debugPrint('‚ö†Ô∏è Tab index unchanged');
        }
      }
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    routeObserver.subscribe(this, ModalRoute.of(context)!);
  }

  @override
  void didPop() {
    debugPrint('‚ö†Ô∏è didPop called for route: ${widget.currentRoute}');
    // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–∞–±–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
    _updateTabFromRoute();
  }

  @override
  void didPopNext() {
    debugPrint('‚ö†Ô∏è didPopNext called for route: ${widget.currentRoute}');
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    _updateTabFromRoute();
  }

  void _updateTabFromRoute() {
    final routeWithoutQuery = widget.currentRoute.split('?')[0];
    final normalizedRoute = _normalizeRoute(routeWithoutQuery);
    final index = _routesToTabIndex[normalizedRoute] ?? 0;

    // Debug: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–∞–±–∞
    debugPrint('üìç MAIN TAB INDEX UPDATE:');
    debugPrint('   Current route: ${widget.currentRoute}');
    debugPrint('   Route without query: $routeWithoutQuery');
    debugPrint('   Normalized route: $normalizedRoute');
    debugPrint('   Tab index: $index');
    debugPrint('   Controller index: ${_tabController.index}');

    if (_tabController.index != index) {
      debugPrint(
          '   üîÑ Updating main tab controller index from ${_tabController.index} to $index');
      // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º _previousTabIndex –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setState(() {
        _tabController.index = index;
      });
    } else {
      debugPrint('   ‚úÖ Main tab index already correct');
    }
  }

  void _navigateToTab(int index) {
    final route = _tabIndexToRoutes[index];

    if (route != null && widget.currentRoute != route) {
      // Debug: –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –≥–ª–∞–≤–Ω—ã–º–∏ —Ç–∞–±–∞–º–∏
      debugPrint('üîÑ MAIN TAB TRANSITION:');
      debugPrint('   From: ${widget.currentRoute} (index: $_previousTabIndex)');
      debugPrint('   To route template: $route (index: $index)');

      WidgetsBinding.instance.addPostFrameCallback((_) {
        // Clean query parameters from current route
        final currentRouteBase = widget.currentRoute.split('?')[0];
        final parts = currentRouteBase.split('/');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        final previousIndex = _tabController.previousIndex ?? _previousTabIndex;
        final isMovingRight = index > previousIndex;
        debugPrint(
            '   üìä Previous index: $previousIndex, Current index: $index');
        debugPrint(
            '   üé≠ Animation direction: ${isMovingRight ? 'RIGHT ‚Üí' : 'LEFT ‚Üê'}');

        String targetRoute = '';
        bool shouldNavigate = true;

        if (index == 3) {
          // Profile tab
          debugPrint('   üéØ Profile tab selected');
          final authState = ref.read(authProvider);
          if (!authState.isAuthenticated) {
            debugPrint('   ‚ö†Ô∏è User not authenticated - redirecting to login');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç–∞–±–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            _lastTabIndexBeforeAuth = _tabController.index;
            debugPrint(
                '   üíæ Saving last tab index before auth: $_lastTabIndexBeforeAuth (from current tab ${_tabController.index})');

            // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–± –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            WidgetsBinding.instance.addPostFrameCallback((_) {
              if (mounted) {
                setState(() {
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º
                  // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞–±–æ–º –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –ª–æ–≥–∏–Ω
                  final currentIndex = _tabController.index;
                  debugPrint(
                      '   üîô Immediately reverting tab to current route index: $currentIndex');
                  _tabController.index = currentIndex;
                });
              }
            });

            context.pushNamed('login');
            shouldNavigate = false;
          } else {
            if (parts.length >= 3 && parts[1] == 'malls') {
              final mallId = parts[2];
              targetRoute = '/malls/$mallId/profile';
            } else {
              targetRoute = '/malls';
            }
          }
        } else if (index == 2) {
          // Stores tab
          debugPrint('   üè™ Stores tab selected');
          if (parts.length >= 3 && parts[1] == 'malls') {
            final mallId = parts[2];
            targetRoute = '/malls/$mallId/stores';
          } else {
            targetRoute = '/stores';
          }
        } else if (index == 0) {
          // Malls tab
          debugPrint('   üè¢ Malls tab selected');
          if (parts.length >= 3 && parts[1] == 'malls') {
            final mallId = parts[2];
            targetRoute = '/malls/$mallId';
          } else {
            targetRoute = '/malls';
          }
        } else if (index == 1) {
          // Promotions tab
          debugPrint('   üéØ Promotions tab selected');
          if (parts.length >= 3 && parts[1] == 'malls') {
            final mallId = parts[2];
            targetRoute = '/malls/$mallId/promotions';
          } else {
            targetRoute = '/malls';
          }
        }

        if (shouldNavigate &&
            targetRoute.isNotEmpty &&
            targetRoute != currentRouteBase) {
          debugPrint(
              '   üì¶ Extra data: fromRight=$isMovingRight, previousRoute=${widget.currentRoute}');
          debugPrint('   üéØ Navigating to: $targetRoute');

          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
          context.push(targetRoute, extra: {
            'fromRight': isMovingRight,
            'previousRoute': widget.currentRoute,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º previous index –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          _previousTabIndex = index;
        } else if (!shouldNavigate) {
          debugPrint('   ‚ö†Ô∏è Navigation cancelled (auth required)');
        } else {
          debugPrint('   ‚ö†Ô∏è Navigation skipped (same route)');
        }
      });
    } else {
      debugPrint('‚ö†Ô∏è MAIN TAB NAVIGATION SKIPPED: same route or null');
      debugPrint('   Route: $route, Current: ${widget.currentRoute}');
    }
  }

  @override
  Widget build(BuildContext context) {
    final normalizedRoute = _normalizeRoute(widget.currentRoute);
    final currentIndex = _routesToTabIndex[normalizedRoute] ?? 0;

    // –í –∫–∞–∂–¥–æ–º –±–∏–ª–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–∞–±–∞ —Ç–µ–∫—É—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    if (_tabController.index != currentIndex) {
      debugPrint(
          '‚ö†Ô∏è Tab index mismatch in build: controller index ${_tabController.index}, route index $currentIndex, currentRoute: ${widget.currentRoute}');

      // –ï—Å–ª–∏ –º—ã –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞, —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–∞–±–∞
      if (!widget.currentRoute.startsWith('/login')) {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (mounted) {
            setState(() {
              _tabController.index = currentIndex;
            });
            debugPrint('‚ö†Ô∏è Forced tab index update to $currentIndex in build');
          }
        });
      }
    }

    return PopScope(
      canPop: false,
      onPopInvoked: (didPop) {
        if (didPop) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ª–∏ –º—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
        if (widget.currentRoute.startsWith('/login')) {
          debugPrint('‚ö†Ô∏è Physical back button pressed on login page');
          // –ü—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
          // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (mounted) {
              final routeWithoutQuery = widget.currentRoute.split('?')[0];
              final normalizedRoute = _normalizeRoute(routeWithoutQuery);
              final index = _routesToTabIndex[normalizedRoute] ?? 0;

              debugPrint(
                  '‚ö†Ô∏è Restoring tab to $index after physical back from login');
              setState(() {
                _tabController.index = index;
              });
            }
          });
          Navigator.of(context).pop();
          return;
        }

        if (currentIndex != 0) {
          _navigateToTab(0);
        } else {
          Navigator.of(context).pop();
        }
      },
      child: Scaffold(
        body: widget.child,
        bottomNavigationBar: CustomTabBar(tabController: _tabController),
      ),
    );
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _tabController.dispose();
    super.dispose();
  }
}
